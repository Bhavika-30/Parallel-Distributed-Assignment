**Q1**
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N (1 << 16)  // 2^16 elements

void daxpy(double a, double *X, double *Y, int start, int end) {
    for (int i = start; i < end; i++) {
        X[i] = a * X[i] + Y[i];
    }
}

int main(int argc, char *argv[]) {
    int rank, size;
    double a = 2.5;
    double *X, *Y;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int chunk_size = N / size;
    int start = rank * chunk_size;
    int end = start + chunk_size;

    if (rank == 0) {
        X = (double *)malloc(N * sizeof(double));
        Y = (double *)malloc(N * sizeof(double));
        for (int i = 0; i < N; i++) {
            X[i] = i * 1.0;
            Y[i] = i * 2.0;
        }
    }

    double *local_X = (double *)malloc(chunk_size * sizeof(double));
    double *local_Y = (double *)malloc(chunk_size * sizeof(double));

    MPI_Scatter(X, chunk_size, MPI_DOUBLE, local_X, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    MPI_Scatter(Y, chunk_size, MPI_DOUBLE, local_Y, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    double start_time = MPI_Wtime();
    
    daxpy(a, local_X, local_Y, 0, chunk_size);

    double local_time = MPI_Wtime() - start_time;
    double global_time;
    MPI_Reduce(&local_time, &global_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);

    MPI_Gather(local_X, chunk_size, MPI_DOUBLE, X, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("DAXPY completed in %f seconds\n", global_time);
        free(X);
        free(Y);
    }

    free(local_X);
    free(local_Y);
    
    MPI_Finalize();
    return 0;
}


**Q2**
#include <mpi.h>
#include <stdio.h>

static long num_steps = 100000;
double step;

int main(int argc, char* argv[]) {
    int rank, size, i;
    double x, pi, sum = 0.0, partial_sum = 0.0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) step = 1.0 / (double)num_steps;

    MPI_Bcast(&step, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    for (i = rank; i < num_steps; i += size) {
        x = (i + 0.5) * step;
        partial_sum += 4.0 / (1.0 + x * x);
    }

    MPI_Reduce(&partial_sum, &sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        pi = step * sum;
        printf("Calculated value of Ï€: %.15f\n", pi);
    }

    MPI_Finalize();
    return 0;
}


**Q3**
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <math.h>

int is_prime(int n) {
    if (n <= 1) return 0;
    if (n <= 3) return 1;
    if (n % 2 == 0 || n % 3 == 0) return 0;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return 0;
    }
    return 1;
}

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        fprintf(stderr, "This program must be run with at least 2 processes.\n");
        MPI_Abort(MPI_COMM_WORLD, 1);
        return 1;
    }

    int max_value = 100; // Example maximum value
    if (argc > 1) {
        max_value = atoi(argv[1]);
    }

    if (rank == 0) { // Master process
        int next_number = 2;
        int received_number;
        MPI_Status status;

        while (next_number <= max_value) {
            MPI_Recv(&received_number, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);

            if (received_number == 0) {
                // Slave is requesting a number
            } else if (received_number > 0) {
                printf("%d is prime\n", received_number);
            } else {
                //printf("%d is not prime\n", -received_number);
            }

            if (next_number <= max_value) {
                MPI_Send(&next_number, 1, MPI_INT, status.MPI_SOURCE, 0, MPI_COMM_WORLD);
                next_number++;
            }
        }
     
        for (int i = 1; i < size; i++) {
            int terminate = -1;
            MPI_Send(&terminate, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
    } else { 
        int number_to_test;
        int result;
        while (1) {
    
            MPI_Send(&result, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);

            MPI_Recv(&number_to_test, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

            if (number_to_test < 0) {
               
                break;
            }

            if (is_prime(number_to_test)) {
                result = number_to_test;
            } else {
                result = -number_to_test;
            }

        }
    }

    MPI_Finalize();
    return 0;
}
